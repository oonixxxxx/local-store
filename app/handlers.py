from ipaddress import AddressValueError
from os import name
from aiogram import F, Router

from aiogram.filters import CommandStart, Command
from aiogram.utils.markdown import hbold
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.types.input_file import FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

class Reg(StatesGroup):
    name = State()
    number = State()
    adress = State()
    articul = State()


#CONSTANS:
name = ''
adress = ''


menu_button = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text='–ö–æ—Ä–∑–∏–Ω–∞ üõí')],
                                     [KeyboardButton(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å üìÉ‚úèÔ∏è'), KeyboardButton(text='–ö–æ–Ω—Ç–∞–∫—Ç üì∞')]],
        resize_keyboard=True,
        input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω—Ç –º–µ–Ω—é.')


busket_button = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'), KeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ')]],
    resize_keyboard=True)


add_item_button = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç–æ–≤–∞—Ä'), KeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ')]], 
    resize_keyboard=True,
    input_field_placeholder='–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª—å')


router = Router()
catalog_photo = FSInputFile('demo.jpg')


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(f"Hello! –Ø –±–æ—Ç –¥–ª–ª—è –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ \n —á—Ç–æ –±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏ '–í –º–µ–Ω—é'", 
                         reply_markup=menu_button)


@router.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å üìÉ‚úèÔ∏è')
async def getcatalog(message: Message):
    await message.answer('info about us')


@router.message(F.text == '–ö–æ—Ä–∑–∏–Ω–∞ üõí')
async def get_busket(message: Message):
    await message.answer('—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∫–æ—Ä–∑–∏–Ω—ã',reply_markup=busket_button)


@router.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')
async def add_item(message: Message, state: FSMContext):
    await state.set_state(Reg.articul)
    await message.answer('–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –Ω–µ–∫–æ–µ —á–∏—Å–ª–æ, –∞—Ä—Ç–∏–∫—É–ª—å', reply_markup=add_item_button)


@router.message(F.text == '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ')
async def go_to_pay(message: Message):
    await message.answer('–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞—Ü–Ω–∏—Ü—É —Å –æ–ø–ª–∞—Ç–æ–π')

#!–∏–¥–µ—è: —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –∏–º –∞—Ä—Ç–∏–∫—É–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ input: name, adress, check_photo

@router.message(F.text == '–ö–æ–Ω—Ç–∞–∫—Ç üì∞')
async def get_contact(message: Message):
    await message.answer('–§—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç—ã')


@router.message(F.text == '–í –º–µ–Ω—é')
async def get_menu(message: Message):
    await message.answer('you in menu', reply_markup=menu_button)

'''
docstring
–§—É–Ω–∫—Ü–∏ —è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ '/reg' –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–∞–µ—Ä–µ–º–µ–Ω–Ω—ã–µ adress, name –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Ö –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
'''

@router.message(Command('reg'))
async def reg_one(message: Message, state: FSMContext):
    await state.set_state(Reg.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')


@router.message(Reg.name)
async def reg_second(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')


@router.message(Reg.number)
async def second_three(message: Message, state: FSMContext):
    
    global name
    global adress
    
    await state.update_data(number=message.text)
    await message.answer('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')
    data = await state.get_data() #{'name': 'your name', 'number': 'number'}
    name = data['name']
    adress = data['number']